http://localhost:8006/api/invoices?pagination=false
http://localhost:8006/api/customers?pagination=true&itemsPerPage=10

Si on a dans api_platform:
items_per_page_parameter_name: "count"

http://localhost:8006/api/customers?pagination=true&count=10

Les orders (exemple) : 

http://localhost:8006/api/customers?firstname=Jacques&lastname=Daselorme
http://localhost:8006/api/invoices?order[sendAt]=desc
http://localhost:8006/api/customers?firstname=paul&order[lastname]=asc

On selectionne les opérations que l'on veut pouvoir rendre disponible. 
On peut également changer les noms de chemin avec l'option path.

 *  collectionOperations={"GET"={"path"="/clients"}, "POST"}, 
 *  itemOperations={"GET"={"path"="/clients/{id}"}, "PUT", "DELETE"},

Sous-ressources
Exemple // les factures d'un seul customer via l'url

http://localhost:8006/api/customers/77/invoices
/**
 * @ORM\OneToMany(targetEntity=Invoice::class, mappedBy="customer", cascade={"persist"})
 * @Groups({"customers_read"})
 * @ApiSubresource
 */
private $invoices;

http://localhost:8006/api/invoices/234/increment

http://localhost:8006/api/login_check

Ajouter dans auth bearer token. Puis renseigner le token délivré par JWT. 
Pour accéder de nouveau aux ressources.

Kernel.request
=>
Kernel.view
=>
Kernel.response

#####
#####
#####

composer require encore
npm install

webpack.config.js
package.json

npm run build /* optimisations prod */
npm run dev

npm run dev-server 
/* 
    Donne des nom avec une url
    Ajoute un petit serveur 
 */

npm install @babel/preset-react@^7.0.0 --save-dev
npm install react@16.8.6 react-dom@16.8.6 react-router-dom@5.0.0 axios@0.18.0






